/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 4>, <&to 4>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        arrowfuncs: arrowfuncs {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWFUNCS";
            bindings = <&thin_arrowfunc>, <&thick_arrowfunc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        HRM_L: HRM_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 35 36 37 48 49 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 48 49 50 51 46 47 64 65 66 67 68 52 53 54 71 70 69 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        HMR_R: HMR_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 17 18 19 20 21 29 30 31 32 33 41 42 43 44 45 59 60 61 62 63 75 76 77 78 79 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 54 55 56 57 58 59 60 61 62 63 73 74 75 76 77 78 79 52 53 54 55 56 70 71 72 69>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parentheses_carrot_L: parentheses_carrot_L {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESES_CARROT_L";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parentheses_carrot_R: parentheses_carrot_R {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESES_CARROT_R";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        square_curly_L: square_curly_L {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_CURLY_L";
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        square_curly_R: square_curly_R {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUARE_CURLY_R";
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        closed_parentheses_carrots: closed_parentheses_carrots {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSED_PARENTHESES_CARROTS";
            bindings = <&closed_parentheses>, <&closed_carrots>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        closed_square_curly: closed_square_curly {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSED_SQUARE_CURLY";
            bindings = <&closed_braces>, <&closed_bracket>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        thick_arrowfunc: thick_arrowfunc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "THICK_ARROWFUNC";
        };

        thin_arrowfunc: thin_arrowfunc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "THIN_ARROWFUNC";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        closed_parentheses: closed_parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR>;
            label = "CLOSED_PARENTHESES";
        };

        closed_carrots: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT>;
            label = "NEW_MACRO";
        };

        closed_braces: closed_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE>;
            label = "CLOSED_BRACES";
        };

        closed_bracket: closed_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET>;
            label = "CLOSED_BRACKET";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp ESCAPE        &kp F2    &kp F3    &kp F4    &kp F5                                                                                                    &kp F6     &kp F7            &kp F8             &kp F9         &mt F12 F10
&mt F1 F11        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                                                                  &kp N6  &kp N7     &kp N8            &kp N9             &kp N0         &kp MINUS
&kp TAB           &kp Q     &kp W     &kp E     &kp R     &kp T                                                                                   &kp Y   &kp U      &kp I             &kp O              &kp P          &kp BSLH
&kp LEFT_SHIFT    &kp A     &kp S     &kp D     &kp F     &kp G                                                                                   &kp H   &kp J      &kp K             &kp L              &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z     &kp X     &kp C     &kp V     &kp B   &kp ENTER  &kp RCTRL       &magic 4 0  &kp GRAVE      &kp RC(B)  &kp DELETE     &kp N   &kp M      &kp COMMA         &kp DOT            &kp FSLH       &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp LGUI  &kp LALT  &kp CAPS  &kp CAPS          &kp SPACE  &kp LEFT_SHIFT  &mo 3       &kp RIGHT_ALT  &mo 2      &kp BACKSPACE          &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RGUI       &kp RIGHT_CONTROL
            >;
        };

        VimArrowKeys {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                         &trans         &trans  &trans     &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans         &trans         &trans  &trans     &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp PAGE_UP    &kp BACKSPACE  &trans  &kp DEL    &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp LEFT       &kp DOWN       &kp UP  &kp RIGHT  &kp ESCAPE  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PAGE_DOWN  &kp TAB        &trans  &trans     &trans      &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                 &trans         &trans  &trans     &trans      &trans
            >;
        };

        Symbols {
            bindings = <
&none       &none            &none          &none                 &none                                                                                              &none              &none             &none  &none  &none
&none       &none            &none          &kp LESS_THAN         &kp GREATER_THAN       &none                                                            &none      &none              &none             &none  &none  &none
&none       &kp EXCLAMATION  &kp PIPE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none                                                            &kp GRAVE  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &none  &none  &none
&kp ESCAPE  &kp KP_DOT       &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &thick_arrowfunc                                                 &kp EQUAL  &kp PLUS           &kp MINUS         &none  &none  &none
&none       &kp QUESTION     &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &thin_arrowfunc   &none       &none  &none  &none  &none  &none  &kp UNDER  &kp KP_MULTIPLY    &kp KP_DIVIDE     &none  &none  &none
&none       &none            &none          &kp LESS_THAN         &kp GREATER_THAN                         &kp ESCAPE  &none  &none  &none  &none  &none             &none              &none             &none  &none  &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                             &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                       &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                        &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                      &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &magic 4 0  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &to 0       &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 5
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
